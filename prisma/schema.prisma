// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

// NextAuth.js schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Subscription fields
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  // Subscription status
  subscriptionStatus SubscriptionStatus @default(FREE)
  subscriptionTier   SubscriptionTier   @default(FREE)

  accounts         Account[]
  sessions         Session[]
  challengeProgress ChallengeProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Challenges stored in database (premium content)
model Challenge {
  id            String   @id @default(cuid())
  slug          String   @unique
  title         String
  summary       String
  difficulty    Difficulty
  category      String
  skills        String[] // Array of skills
  estimatedTime String
  content       String   @db.Text // Full MDX content
  tier          SubscriptionTier @default(FREE)
  published     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  progress ChallengeProgress[]

  @@index([tier, published])
  @@index([category, difficulty])
}

// Challenge progress tracking
model ChallengeProgress {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  completed   Boolean  @default(false)
  startedAt   DateTime @default(now())
  completedAt DateTime?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
}

// Enums
enum SubscriptionStatus {
  FREE
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

enum SubscriptionTier {
  FREE
  PRO
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
